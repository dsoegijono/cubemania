<div id="timer">
  <p class="scramble"><%= @puzzle.scramble %></p>
  <a class="go" href="#" onclick="toggleTimer(); return false">GO!</a>
  <ol>
  <%- @puzzle.attempt_count.times do |index| -%>
    <li>
      <div>
        <span class="time">-</span>
        <a class="dnf" href="#" onclick="toggleDnf(<%= index %>); return false;">DNF</a>
      </div>
      <div class="scramble"><%= @puzzle.scramble %></div>
    </li>
  <%- end -%>
  </ol>
  <p class="average">&Oslash; <span class="time">0.00</span></p>
</div>

<%- javascript_tag do -%>
  function toggleTimer() {
    this.interval == null ? startTimer() : stopTimer();
  }
  function startTimer() {
    if ($("#timer li.done").length == <%= @puzzle.attempt_count %>) {
      $("#timer li").removeClass("done").removeClass("dnf").find(".time").text("-");
      $("#timer .average .time").text("0.00");
    }
    $("#timer .go").text(<%= @puzzle.countdown %>).addClass("countdown");
    this.interval = setInterval(countDown, 10);
  }
  function countDown() {
    var time = Math.round((Number($("#timer .go").text()) - 100/1000) * 100) / 100;
    $("#timer .go").text(time.toFixed(2));
    if (time == 0) {
      $("#timer .go").removeClass("countdown").addClass("running");
      clearInterval(this.interval);
      this.interval = setInterval(countUp, 10);
    }
  }
  function countUp() {
    var time = Math.round((Number($("#timer .go").text()) + 1/100) * 100) / 100;
    $("#timer .go").text(time.toFixed(2));
  }
  function stopTimer() {
    clearInterval(this.interval); this.interval = null;
    if ($("#timer .go").hasClass("countdown")) {
      $("#timer .go").text("GO!").removeClass("countdown");
    }
    else {
      $("#timer li:not(.done):first").addClass("done").find(".time").text($("#timer .go").text());
      var average = calculateAverage();
      $("#timer .average .time").text(average.toFixed(2));
      $("#timer .go").removeClass("running");
      if ($("#timer li.done").length == <%= @puzzle.attempt_count %>) {
        commitTimes(average * 1000);
      }
      else {
        $("#timer p.scramble").text($("#timer li.done:last .scramble").text());
      }
    }
  }
  function calculateAverage() {
    var times = $("#timer li.done:not('.dnf') .time").map(function() {
      var time = Number($(this).text());
      return isNaN(time) ? 0 : time;
    }).get();
    if (times.length == 0) return 0;
    times.sort(function(a, b) {
      return a - b;
    });
    var count = times.length;
    if (count > 2) {
      times.shift(); times.pop();
      count -= 2;
    }
    var sum = 0;
    for (var i = 0; i < count; i++) {
      sum += times[i];
    }
    return Math.round(sum / count * 100) / 100;
  }
  function commitTimes(average) {
    var map = {"average[time]": average, "average[dnf]": $("#timer li.dnf").length >= 2, "average[puzzle_id]": "<%= @puzzle.id %>", "authenticity_token": "<%= form_authenticity_token %>"};
    $("#timer li").each(function(index) {
      map["singles[" + index + "][time]"] = Number($(this).find(".time").text()) * 1000;
      map["singles[" + index + "][scramble]"] = $(this).find(".scramble").text();
      map["singles[" + index + "][dnf]"] = $(this).hasClass("dnf");
      map["singles[" + index + "][puzzle_id]"] = "<%= @puzzle.id %>";
    });
    $.post("<%= clocks_path %>", map, function(data, status) {
      document.getElementById("chart").addItem(new XMLSerializer().serializeToString(data));
    }, "xml");
  }
  function toggleDnf(index) {
    $("#timer li:eq(" + index + ")").toggleClass("dnf");
    $("#timer .average .time").text(calculateAverage().toFixed(2));
  }
  $(window).keydown(function(event) {
    if (event.keyCode == 32) toggleTimer();
  });
<%- end -%>