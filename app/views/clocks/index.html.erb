<%= partial 'chart' %>
<%= partial 'timer' %>

<%- javascript_tag do -%>
  interval = null;
  
  function toggleTimer() {
    if ($("#timer tr.done").length != <%= @puzzle.attempt_count %>)
      this.interval == null ? startTimer() : stopTimer();
  }
  function startTimer() {
    if (<%= @puzzle.countdown %> == 0) {
      startTime = new Date().getTime();
      $("#go").addClass("running");
      interval = setInterval(countUp, 1);
    } else {
      $("#go").text(<%= @puzzle.countdown %>).addClass("countdown");
      interval = setInterval(countDown, 1000);
    } 
  }
  function countDown() {
    var time = $("#go").text() - 1;
    $("#go").text(time);
    if (time == 0) {
      $("#go").removeClass("countdown").addClass("running");
      clearInterval(interval);
      startTime = new Date().getTime();
      interval = setInterval(countUp, 1);
    }
  }
  function countUp() {
    var time = (new Date().getTime() - startTime);
    $("#go").text(formatTime(time));
  }
  function stopTimer() {
    clearInterval(interval); interval = null;
    if ($("#go").hasClass("countdown")) {
      $("#go").text("GO!").removeClass("countdown");
    }
    else {
      var time = (new Date().getTime() - startTime);
      $("#go").text(formatTime(time));
      $("#timer tr.done:last .flags .delete").hide();
      $("#timer tr:not(.done):first").find(".milliseconds").text(time)
      $("#timer tr:not(.done):first").addClass("done").find(".time").text(formatTime(time));
      $("#go").removeClass("running");
      updateWorstAndBest();
      updateAverage();
      if ($("#timer tr.done").length < <%= @puzzle.attempt_count %>) {
        updateScramble();
      }
    }
  }
  function getMilliseconds() {
    return $("#timer tr.done .milliseconds").map(function() {
      var time = parseInt($(this).text());
      return isNaN(time) ? 0 : time;
    }).get();
  }
  function updateWorstAndBest() {
    $("#timer tr.done").removeClass("worst").removeClass("best");
    if ($("#timer tr.done:not(.dnf)").length < 2) return;
    var times = $("#timer tr.done:not(.dnf) .milliseconds").map(function() {
      var time = parseInt($(this).text());
      return isNaN(time) ? 0 : time;
    }).get();
    var minIndex = times.inArray(times.min());
    var maxIndex = times.inArray(times.max());
    if ($("#timer tr.dnf").length > 0) {
      $("#timer tr.dnf:first").addClass("worst");
    } else {
      $("#timer tr.done:not(.dnf):eq(" + maxIndex + ")").addClass("worst");
    }
    $("#timer tr.done:not(.dnf):eq(" + minIndex + ")").addClass("best");
  }
  function calculateAverageOfAllTimes() {
    var times = getMilliseconds();
    count = times.length;
    if (count == 0) return 0;
    var sum = 0;
    for (var i = 0; i < times.length; i++) {
      sum += times[i];
    }
    return Math.round(sum / count);
  }
  function calculateAverage() {
    var count = $("#timer tr.done").length;
    var dnfCount = $("#timer tr.dnf").length;
    if (count == 0) return 0; //? siehe caclu..OfAllTimes
    if (count < 5) {
      return calculateAverageOfAllTimes();
    } else {
      if (dnfCount > 1) {
        return calculateAverageOfAllTimes();
      }
      var times = $("#timer tr.done:not('.dnf') .milliseconds").map(function() {
        var time = parseInt($(this).text());
        return isNaN(time) ? 0 : time;
      }).get();
      times.sort(function(a, b) {
        return a - b;
      });
      if (dnfCount == 0) {
        times.pop();
      }
      times.shift();
      var sum = 0;
      for (var i = 0; i < times.length; i++) {
        sum += times[i];
      }
      return Math.round(sum / (count - 2));
    }
  }
  function updateScramble() {
    $("#scramble").text($("#timer tr:not(.done):first .scramble").text());
  }
  function commitTimes() {
    $("#timer input").attr("disabled", "disabled");
    var average = calculateAverage();
    var map = {"average[time]": average, "average[dnf]": $("#average span").hasClass("dnf"), "average[comment]": $("#comment").val(), "authenticity_token": "<%= form_authenticity_token %>"};
    $("#timer tr.done").each(function(index) {
      map["singles[" + index + "][time]"] = $(this).find(".milliseconds").text();
      map["singles[" + index + "][scramble]"] = $(this).find(".scramble").text();
      map["singles[" + index + "][dnf]"] = $(this).hasClass("dnf");
    });
    $.post("<%= kind_puzzle_times_path %>", map, null, "script");
  }
  function updateAverage() {
    if ($("#timer tr.dnf").length >= <%= @puzzle.attempt_count > 4 ? 2 : 1 %>) {
      $("#timer input").removeAttr("disabled");
      $("#average span").addClass("dnf");
    } else {
      if($("#timer tr.done").length < <%= @puzzle.attempt_count %>) {
        $("#timer input").attr("disabled", "disabled");
      } else {
        $("#timer input").removeAttr("disabled");
      }
      $("#average span").removeClass("dnf");
    }
    $("#average span").text(formatTime(calculateAverage()));
  }
  function deleteLastTime() {
    $("#timer tr.done:last .time").text("-");
    $("#timer tr.done:last .milliseconds").text("");
    $("#timer tr.done:last").removeClass();
    $("#timer tr.done:last .flags .delete").show();
    updateAverage();
    updateWorstAndBest();
  }
  function toggleDnf(index) {
    if ($("#timer tr:eq(" + index + ")").hasClass("plus2")) {
      $("#timer tr:eq(" + index + ") .milliseconds").text(parseInt($("#timer tr:eq(" + index + ") .milliseconds").text()) - 2000);
      $("#timer tr:eq(" + index + ") .time").text(formatTime($("#timer tr:eq(" + index + ") .milliseconds").text())) 
    }
    $("#timer tr:eq(" + index + ")").toggleClass("dnf").removeClass("plus2");
    updateAverage();
    updateWorstAndBest();
  }
  function togglePlus2(index) {
    $("#timer tr:eq(" + index + ")").toggleClass("plus2").removeClass("dnf");
    var time = parseInt($("#timer tr:eq(" + index + ") .milliseconds").text());
    if ($("#timer tr:eq(" + index + ")").hasClass("plus2")) {
      time += 2000;
    } else {
      time -= 2000; 
    }
    $("#timer tr:eq(" + index + ") .time").text(formatTime(time));
    $("#timer tr:eq(" + index + ") .milliseconds").text(time);
    updateAverage();
    updateWorstAndBest();
  }
  Array.prototype.max = function() {
    return Math.max.apply(Math, this);
  };
  Array.prototype.min = function() {
    return Math.min.apply(Math, this);
  };
  Array.prototype.inArray = function(value) {
    for (var i = 0; i < this.length; i++) {
      if (this[i] == value) return i;
    }
    return -1;
  }
  function formatTime(time) {
    var seconds = time / 1000;
    if (seconds < 60) {
      return seconds.toFixed(2);
    } else {
      var minutes = Math.floor(seconds / 60);
      seconds = seconds - minutes * 60;
      var s = seconds < 10 ? "0" : "";
      return minutes + ":" + s + seconds.toFixed(2);
    }
  }
  $(document).keyup(function(event) {
    if (event.keyCode == 32) {
      toggleTimer();
    }
  });
  /*$(document).keydown(function(event) {
    if (event.keyCode == 32) {
      if (this.intervall != null) {
        stopTimer();
        flag = true;
      }
    }
  });*/
  updateScramble();
<%- end -%>