package {		public class VerticalAxis extends Axis {				private var min:Number = Infinity;		private var max:Number = -Infinity;		private var minLabel:AxisLabel;		private var maxLabel:AxisLabel;				public function VerticalAxis(w:int, h:int) {			super(w, h);			createLabels();		}				private function createLabels():void {			minLabel = createLabel(min);			maxLabel = createLabel(max);			maxLabel.y = 5;		}				private function createLabel(value:int):AxisLabel {			var label:AxisLabel = new AxisLabel();			addChild(label);			return label;		}				public function getPosition(value:int):int {			var ratio:Number = (value - min) / (max - min);			return h - ratio * h;		}				public function updateExtremes(min:int, max:int):void {			updateExtreme(min);			updateExtreme(max);		}				private function updateExtreme(value:int):void {			if (value < min) min = value;			else if (value > max) max = value;		}				public function resetExtremes():void {			min = Infinity;			max = -Infinity;		}				public function draw():void {			drawAxis();			drawLabels();		}				private function drawAxis():void {			graphics.clear();			graphics.lineStyle(2, 0xFFFFFF);			graphics.moveTo(w, 0);			graphics.lineTo(w, h);		}				private function drawLabels():void {			minLabel.setTitle(format(min));			minLabel.x = w - minLabel.width - 5;			minLabel.y = h - minLabel.height - 5;			maxLabel.setTitle(format(max));			maxLabel.x = w - maxLabel.width - 5;		}				private function format(value:int):String {			if (value < 60000) {				return (value / 1000).toFixed(2) + " s";			}			else {				var min:int = value / 60000;				var s:Number = (value - min * 60000) / 1000;				return min + ":" + prependZero(s, s.toFixed(2)) + " min";			}		}				private function prependZero(value:int, s:String):String {			if (value < 10) return "0" + s;			return s;		}			}	}